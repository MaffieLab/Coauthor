name: Create new release

on:
  workflow_dispatch:

jobs:
  get-release-info:
    name: "Get release info"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}
      archive-name: ${{ steps.get-archive-name.outputs.ARCHIVE_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release version from package.json
        id: "get-version"
        run: |
          version=$(node -p "require('./package.json').version")
          echo "VERSION=$version" >> $GITHUB_OUTPUT

      - name: Construct archive name using release version
        id: "get-archive-name"
        run: |
          echo "ARCHIVE_NAME=coauthor-$version" >> $GITHUB_OUTPUT

  build-chrome-extension:
    name: Build extension
    needs: [get-release-info]
    uses: ./.github/workflows/build-extension-reusable.yml
    with:
      environment: production
      archive-name: ${{needs.get-release-info.outputs.archive-name}}
    secrets: inherit

  upload-extension:
    name: Upload extension to chrome web store
    needs: [build-chrome-extension, get-release-info]
    runs-on: ubuntu-latest
    steps:
      # must use this to access artifact created in a different job
      - name: Download bundle artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.get-release-info.outputs.archive-name}}
          path: ./build

      # download artifact action unzips on download (not configurable) so must zip up again
      - name: Archive build
        run: |
          zip -r ${{needs.get-release-info.outputs.archive-name}}.zip build

      - name: Install webstore cli
        run: |
          npm install -g chrome-webstore-upload-cli@3.3.1

      - name: Upload step
        run: |
          chrome-webstore-upload \
            --source ${{needs.get-release-info.outputs.archive-name}}.zip \
            --extension-id ${{ vars.EXTENSION_ID }} \
            --client-id ${{ secrets.CI_GOOGLE_OAUTH_CLIENT_ID }} \
            --client-secret ${{ secrets.CI_GOOGLE_OAUTH_CLIENT_SECRET }} \
            --refresh-token ${{ secrets.CI_GOOGLE_OAUTH_REFRESH_TOKEN }}

  push-tag:
    name: Push Tag
    needs: [get-release-info, upload-extension]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Push Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ needs.get-release-info.outputs.version }}
          git push origin ${{ needs.get-release-info.outputs.version }}

  # Intentionally made a draft release instead of a official release
  # because the release shouldn't be finalized and made public
  # until we know for sure that the extension has been approved
  # and published (It could be rejected after uploading)
  create-draft-release:
    name: Create draft release
    needs: [push-tag, get-release-info]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      # must use this to access artifact created in a different job
      - name: Download bundle artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.get-release-info.outputs.archive-name}}
          path: ./build

      # download artifact action unzips on download (not configurable) so must zip up again
      - name: Archive build
        run: |
          zip -r ${{needs.get-release-info.outputs.archive-name}}.zip build

      - name: Create release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{needs.get-release-info.outputs.archive-name}}.zip
          draft: true
          generate_release_notes: true
          tag_name: ${{ needs.get-release-info.outputs.version }}
          name: ${{ needs.get-release-info.outputs.version }}
